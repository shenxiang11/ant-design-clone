{"version":3,"file":"Spin.stories-56be7b0a.js","sources":["../../src/components/Spin/Spin.tsx"],"sourcesContent":["import React, { ReactNode, useMemo, useState } from \"react\";\n\nconst SpinSizes = [\"small\", \"default\", \"large\"] as const;\nexport type SpinSize = (typeof SpinSizes)[number];\nexport type SpinIndicator = React.ReactElement<HTMLElement>;\n\nexport interface SpinProps {\n  className?: string;\n  spinning?: boolean;\n  style?: React.CSSProperties;\n  size?: SpinSize;\n  tip?: React.ReactNode;\n  delay?: number;\n  indicator?: SpinIndicator;\n  children?: React.ReactNode;\n}\n\nfunction renderIndicator(props: SpinProps): ReactNode {\n  const { indicator } = props;\n\n  if (indicator === null) {\n    return null;\n  }\n\n  // TODO: sticky 的作用\n  return (\n    <span className=\"anticon inline-flex\">\n      <svg\n        className=\"animate-spin h-5 w-5 text-blue-600\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n      >\n        <circle\n          className=\"opacity-25\"\n          cx=\"12\"\n          cy=\"12\"\n          r=\"10\"\n          stroke=\"currentColor\"\n          stroke-width=\"4\"\n        ></circle>\n        <path\n          className=\"opacity-75\"\n          fill=\"currentColor\"\n          d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n        ></path>\n      </svg>\n    </span>\n  );\n}\n\nconst Spin: React.FC<SpinProps> = (props) => {\n  const {\n    spinning: customSpinning = true,\n    delay = 0,\n    className,\n    size = \"default\",\n    tip,\n    style,\n    children,\n    ...restProps\n  } = props;\n\n  const [spinning, setSpinning] = useState(true);\n\n  const isNestedPattern = useMemo(() => {\n    return typeof children !== \"undefined\";\n  }, [children]);\n  // TODO: tip only work in nest pattern.\n\n  const spinElement: React.ReactNode = (\n    <div>\n      {renderIndicator(props)}\n      {tip && isNestedPattern ? <div>{tip}</div> : null}\n    </div>\n  );\n\n  if (isNestedPattern) {\n    return (\n      <div>\n        {spinning && <div key=\"loading\">{spinElement}</div>}\n        <div key=\"container\">{children}</div>\n      </div>\n    );\n  }\n\n  return spinElement;\n};\n\nexport default Spin;\n"],"names":["renderIndicator","props","indicator","jsx","jsxs","Spin","customSpinning","delay","className","size","tip","style","children","restProps","spinning","setSpinning","useState","isNestedPattern","useMemo","spinElement"],"mappings":"iPAiBA,SAAAA,EAAAC,EAAA,CACE,KAAA,CAAA,UAAAC,CAAA,EAAAD,EAEA,OAAAC,IAAA,KACE,KAIFC,EAAAA,IAAA,OAAA,CAAA,UAAA,sBAAA,SAAAC,EAAA,KAEI,MAAC,CAAA,UAAA,qCACW,MAAA,6BACJ,KAAA,OACD,QAAA,YACG,SAAA,CAERD,EAAA,IAAA,SAAC,CAAA,UAAA,aACW,GAAA,KACP,GAAA,KACA,EAAA,KACD,OAAA,eACK,eAAA,GACM,CAAA,EACdA,EAAA,IACD,OAAC,CAAA,UAAA,aACW,KAAA,eACL,EAAA,iHACH,CAAA,CACH,CAAA,CAAA,CAAA,CAAA,CAIT,CAEA,MAAAE,EAAAJ,GAAA,CACE,KAAA,CAAM,SAAAK,EAAA,GACuB,MAAAC,EAAA,EACnB,UAAAC,EACR,KAAAC,EAAA,UACO,IAAAC,EACP,MAAAC,EACA,SAAAC,EACA,GAAAC,CACG,EAAAZ,EAGL,CAAAa,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EAEAC,EAAAC,EAAAA,QAAA,IACE,OAAAN,EAAA,IAA2B,CAAAA,CAAA,CAAA,EAI7BO,EAAAf,EAAAA,KAAA,MAAA,CAAA,SAAA,CAEKJ,EAAAC,CAAA,EAAqBS,GAAAO,EAAAd,MAAA,MAAA,CAAA,SAAAO,CAAA,CAAA,EAAA,IACuB,CAAA,CAAA,EAIjD,OAAAO,EACEb,EAAA,KAAA,MAAA,CAAA,SAAA,CAEKU,GAAAX,EAAA,IAAA,MAAA,CAAA,SAAAgB,CAAA,EAAA,SAAA,EAA4ChB,EAAAA,IAAA,MAAA,CAAA,SAAAS,CAAA,EAAA,WAAA,CACd,CAAA,CAAA,EAKrCO,CACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}